package com.gavrilyuk.twentymethods;


import org.springframework.boot.autoconfigure.SpringBootApplication;

import java.util.Arrays;

@SpringBootApplication
public class TwentyMethodsApplication {

    public static void main(String[] args) {
        //1 —Ä–æ–±–∏–ª–∞ –ê–Ω–∞—Å—Ç–∞—Å—ñ—è
        char[] testArray = {'A', 'B', 'C'};
        charArray(testArray);

        //2
        int[] arrayTaskSecond = {1, 2, 3, 4, 5};
        intToChar(arrayTaskSecond);


        //3‚úÖ
        int a = 50;
        int b = 20;
        System.out.println("Task 3 " + max(a, b));

        //4‚úÖ
        int x = 30;
        int y = 400;
        int c = 50;
        System.out.println("Task 4 " + max(x, y, c));

        //5‚úÖ
        int one = 60;
        int two = 70;
        int three = 800;
        int four = 90;
        int five = 100;
        System.out.println("Task 5 = " + max(one, two, three, four, five));

        //6‚úÖ
        char[] string = {'H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd'};
        System.out.println("Task 6 = " + charToString(string));

        //8‚úÖ
        int[] array8 = {10, 20, 60, 40, 50, 80, 30, 90};
        int num8 = 40;
        System.out.println("Task 8 = " + indexOf(array8, num8));

        //9‚úÖ
        int[] array9 = {10, 20, 60, 40, 50, 80, 30, 90};
        int num9 = 20;
        System.out.println("Task 9 = " + lastIndexOf(array9, num9));


        //10‚úÖ
        int n = 5;
        System.out.println("Task 10 = " + factorialNumber(n));

        //11‚úÖ
        int year = 2025;
        System.out.println("Task 11 = " + year + " " + isLeapYear(year));

        //12‚úÖ
        int[] array12 = {10, 20, 60, 40, 50, 80, 30, 90};
        int num12 = 3;
        multiplesNum(array12, num12);

        //13‚úÖ
        int[] arrayForSort = {60, 20, 10, 40, 30, 50};
        System.out.println("Task 13 = " + Arrays.toString(sort(arrayForSort)));

        //14
        byte[] array14 = {1, 2, 3, 4, 5, 6, 7};
        System.out.println("Task 14 = " + byteArray(array14));

        //15‚úÖ
        int[] array1 = {10, 20, 30, 40, 50};
        int[] array2 = {2, 3, 4, 5, 6};
        System.out.println("Task 15 = " + Arrays.toString(multiplyArray(array1, array2)));

        //16‚úÖ
        int[] firstArray = {7, 2, 3, 8, 5, 9};
        int[] secondArray = {1, 2, 3, 4, 5, 6};
        System.out.println("Task 16 = " + Arrays.toString(notSimilar(firstArray, secondArray)));

        // 17‚úÖ
        int[] array17 = {1, 2, 3, 4, 5, 6, 7};
        System.out.println("Task 17 = " + Arrays.toString(reversArray(array17)));

        //18‚úÖ
        int sizeArray = 10;
        int minLimit = 2;
        int maxLimit = 8;
        randomArrayInt(sizeArray, minLimit, maxLimit);
        System.out.println("Tack 18 = " + Arrays.toString(randomArrayInt(sizeArray, minLimit, maxLimit)));

        //19
        char[] string1 = {'H', 'e', 'l', 'l', 'o'};
        char[] string2 = { 'e', 'l', 'l', };
        System.out.println("Task 19 " + checkArraySimilarity(string1, string2));
    }



    static void charArray(char[] array) {
        for (char c : array) {
            System.out.print(c + " ");
        }
        System.out.println();
    }

    //   ‚úÖ Task 2
    static char[] intToChar(int [] array) {
        char[] arrayChar = new char[array.length];

        for (int i = 0; i < array.length; i++) {
            arrayChar[i] = (char) array[i];
        }
        System.out.println(arrayChar);
        return arrayChar;
    }

    //  ‚úÖ Task 3
    static int max(int a, int b) {
        return a > b ? a : b;
    }

    //  ‚úÖ Task 4
    static int max(int x, int y, int c) {
        return max(x, y) > c ? max(x, y) : c;
    }

    //  ‚úÖ Task 5
    static int max(int one, int two, int three, int four, int five) {
        return max(one, two) > max(three, four, five) ? max(one, two) : max(three, four, five);
    }

    //  ‚úÖ Task 6
    static String charToString(char[] array) {
        String result = "";
        for (char c : array) {
            result += c;
        }
        return result;
    }

    //  ‚úÖ Task 8
    static int indexOf(int[] array, int value) {

        for (int i = 0; i < array.length; i++) {
            if (array[i] == value) {
               return i;
            }
        }
        return  -1;
    }

    //  ‚úÖ Task 9
    static int lastIndexOf(int[] array, int value) {

        for (int i = array.length - 1; i >= 0 ; i--) {
            if (array[i] == value) {
                return i;
            }
        }
        return -1;
    }

    //  ‚úÖ Task 10
    static int factorialNumber(int n) {
        int result = 1;
        for (int i = 1; i <= n; i++) {
            result = result * i;

        }
        return result;
    }

    //  ‚úÖ Task 11
    static boolean isLeapYear(int year) {
        return year % 4 == 0 && (year % 400 == 0 || year % 100 != 0);
    }

    //  ‚úÖ Task 12
    static void multiplesNum(int[] array, int value) {
        System.out.print("Task 12 = ");
        int mulNum = 0;
        for (int i = 0; i < array.length; i++) {
            if (array[i] % value == 0) {
                mulNum = array[i];
                System.out.print( mulNum + " ");
            }
        }
        System.out.println();
    }

    //  ‚úÖ Task 13
    static int[] sort(int[] array) {

        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array.length; j++) {
                if (array[i] < array[j]) {
                    int value = array[i];
                    array[i] = array[j];
                    array[j] = value;
                }
            }
        }
        return array;
    }

    //  üõ† Task 14 ‚úÖ–ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ –±–∞–π—Ç, –µ—Å–ª–∏ –≤ –º–∞—Å—Å–∏–≤–µ –µ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –µ–ª–µ–º–µ–Ω—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç—Ä—É
    static boolean byteArray(byte[] array14) {

        for (int i = 0; i < array14.length - 1; i++) {
            for (int j = i + 1; j < array14.length; j++) {
                if (array14[i] == array14[j]) {
                    return true;
                }
            }
        }
        return false;
    }

    //  ‚úÖ Task 15
    static int [] multiplyArray(int[] arrayOne, int[] arrayTwo) {
        int[] result = new int[arrayOne.length];
        for (int i = 0; i < arrayOne.length; i++) {
            result[i] = arrayOne[i] * arrayTwo[i];
        }
        return result;

    }

    //  ‚úÖ Task 16
    static int [] notSimilar(int[] firstArray, int[] secondArray) {
        int[] resultSimilar = new int[firstArray.length + secondArray.length];
        int count = 0;
        for (int i = 0; i < firstArray.length; i++) {
            if (firstArray[i] != secondArray[i]) {
                resultSimilar[count] = firstArray[i];
                count++;
            }
        }

        for (int i = 0; i < firstArray.length; i++) {
            if (firstArray[i] != secondArray[i]) {
                resultSimilar[count] = secondArray[i];
                count++;
            }
        }
        int [] resultArray = new int[count];
        for (int i = 0; i < count; i++) {
            resultArray[i] = resultSimilar[i];
        }
        return resultArray;

    }

    //  ‚úÖ Task 17
    static int[] reversArray(int[] array) {
        for (int i = 0; i < array.length / 2; i++) {
            int temp = array[i];
            array[i] = array[array.length - 1 - i];
            array[array.length - 1 - i] = temp;
        }
        return array;
    }

    //  ‚úÖ Task 18
    static int [] randomArrayInt(int sizeArray, int minLimit, int maxLimit) {
        int[] randomArray = new int[sizeArray];
        for (int i = 0; i < randomArray.length; i++) {
            int valueRandom = (int) (Math.random() * (maxLimit - minLimit + 1) + minLimit);
            randomArray[i] = valueRandom;
        }
        return randomArray;
    }

    //  üõ† Task 19
    static boolean checkArraySimilarity(char[] string1, char[] string2) {
        boolean arraySimilar = false;
        int couter = 0;

        for (int i = 0; i < string1.length; i++) {
            if (string1[i] == string2[couter]) {
                couter++;
            }else {
                couter = 0;
            }
            if (couter == string2.length) {
                return arraySimilar = true;
            }
        }
    return arraySimilar;

    }




    //‚úÖ1) –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —á–∞—Ä–æ–≤, –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ –Ω–∞ —ç–∫—Ä–∞–Ω
    //ü§∑‚Äç‚ôÇÔ∏è2) –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏–Ω—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —á–∞—Ä–æ–≤, –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª –≤ –ø–æ–∑–∏—Ü–∏–∏ –º–∞—Å—Å–∏–≤–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–¥—É —Å–∏–º–≤–æ–ª–∞ –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º–æ–≥–æ –∏–Ω—Ç–∞
    //‚úÖ3) –ø—Ä–∏–º–∏–Ω–∞–µ—Ç 2 –∏–Ω—Ç–∞, –∞ –∏ –±, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–æ–ª—å—à–µ–µ –∏—Ö —ç—Ç–∏—Ö 2—Ö —á–∏—Å–µ–ª
    //‚úÖ4)–ø—Ä–∏–Ω–∏–º–∞–µ—Ç 3–∏–Ω—Ç–∞,–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–æ–ª—å—à–µ–µ –∏–∑ –Ω–∏—Ö
    //‚úÖ5) –ø—Ä–∏–º–∏–Ω–∞–µ—Ç 5 –∏–Ω—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–æ–ª—å—à–µ–µ –∏–∑ –Ω–∏—Ö
    //‚úÖ6) –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —á–∞—Ä–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å–æ—Å—Ç–æ—è—â—É—é –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ –º–∞—Å—Å–∏–≤–∞ (symbols.toString)
    //‚úÖ8) –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏–Ω—Ç–æ–≤, –∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –∏–Ω—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å–∏–≤–∞ –≤ –∫–æ—Ç–æ—Ä–æ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–º,
    //–Ω–∞—á–∏–Ω–∞—è —Å –Ω–∞—á–∞–ª–∞ –º–∞—Å—Å–∏–≤–∞. –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –º–∞—Å—Å–∏–≤–µ –Ω–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç -1
    //‚úÖ9) –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏–Ω—Ç–æ–≤, –∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –∏–Ω—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å–∏–≤–∞ –≤ –∫–æ—Ç–æ—Ä–æ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    //—Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–º, –Ω–∞—á–∏–Ω–∞—è —Å –∫–æ–Ω—Ü–∞ –º–∞—Å—Å–∏–≤–∞. –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –º–∞—Å—Å–∏–≤–µ –Ω–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç -1
    //‚úÖ10) –º–µ—Ç–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–Ω—Ç, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª –æ—Ç –∑–∞–¥–∞–Ω–æ–≥–æ –∏–Ω—Ç–∞
    //‚úÖ11.–ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–Ω—Ç –≥–æ–¥, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç—Ä—É –µ—Å–ª–∏ –≥–æ–¥ –≤—ã—Å–æ–∫–æ—Å–Ω—ã–π.–†—ñ–∫ –≤–≤–∞–∂–∞—î—Ç—å—Å—è –≤–∏—Å–æ–∫–æ—Å–Ω–∏–º, —è–∫—â–æ –≤—ñ–Ω –¥—ñ–ª–∏—Ç—å—Å—è –Ω–∞ 4.
    // –í–∏–Ω—è—Ç–∫–æ–º —î —Ä–æ–∫–∏, —è–∫—ñ –∫—Ä–∞—Ç–Ω—ñ 100 (—Ç–∞–∫—ñ —Ä–æ–∫–∏ —î –≤–∏—Å–æ–∫–æ—Å–Ω–∏–º–∏ —Ç—ñ–ª—å–∫–∏ —Ç–æ–¥—ñ, —è–∫—â–æ –≤–æ–Ω–∏ —â–µ –¥—ñ–ª—è—Ç—å—Å—è –Ω–∞ 400).
    //‚úÖ12) –ø—Ä–∏–º–∏–Ω–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏–Ω—Ç–æ–≤ –∏ —á–∏—Å–ª–æ, –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ –µ–∫—Ä–∞–Ω —Ç–æ–ª—å–∫–æ –µ–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –∫–æ—Ç–æ—Ä—ã–µ –∫—Ä–∞—Ç–Ω—ã —ç—Ç–æ–º—É —á–∏—Å–ª—É
    //‚úÖ13) –º–µ—Ç–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏–Ω—Ç–æ–≤ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –µ–≥–æ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
    //‚úÖ14) –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ –±–∞–π—Ç, –µ—Å–ª–∏ –≤ –º–∞—Å—Å–∏–≤–µ –µ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –µ–ª–µ–º–µ–Ω—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç—Ä—É
    //‚úÖ15) –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞ –∏–Ω—Ç–æ–≤ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø–æ –¥–ª–∏–Ω–Ω–µ, –≤–æ–∑—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏–Ω—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –ø–µ—Ä–µ–º–Ω–æ–∂–µ–Ω–Ω—ã—Ö –µ–ª–µ–º–µ–Ω—Ç–æ–≤ –≤—Ö–æ–¥—è—â–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤
    //‚úÖÔ∏è16) –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞ –∏–Ω—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏–∑ –µ–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç –≤ –º–∞—Å—Å–∏–≤–∞—Ö
    //‚úÖ17)–ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å–∏–≤ –∏–Ω—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∂–µ –Ω–æ –≤ —Ä–µ–≤–µ—Ä—Å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    //‚úÖÔ∏è18)–ø—Ä–∏–Ω–∏–º–∞–µ—Ç 3 –∏–Ω—Ç–∞: -—Ä–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞, -–Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞, -–≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
    // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏–Ω—Ç–æ–≤ –∑–∞–¥–∞–Ω–æ–π –¥–ª–∏–Ω–Ω—ã–π,–∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞ –æ—Ç –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã –¥–æ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã"
    //‚úÖ19)–ø—Ä–∏–Ω–∏–º–∞–µ—Ç 2 –º–∞—Å—Å–∏–≤–∞ —á–∞—Ä–æ–≤, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –≤ 1 –º–∞—Å—Å–∏–≤–µ, —Ç–∞–∫–∞—è –∂–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–æ–≤ –∫–æ—Ç–æ—Ä—É—é
    // –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –≤—Ç–æ—Ä–æ–π –º–∞—Å—Å–∏–≤.–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±—É–ª–µ–∞–Ω

}
